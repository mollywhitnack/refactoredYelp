"use strict";var app=angular.module("myApp",["ui.router","satellizer","ngFileUpload"]);app.config(["$authProvider",function(e){e.loginUrl="api/users/login",e.signupUrl="api/users/signup",e.facebook({clientId:"255060128209165",url:"/api/users/facebook"})}]),app.config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("home",{url:"/",templateUrl:"/html/home.html"}).state("login",{url:"/login",templateUrl:"/html/login.html",controller:"loginCtrl"}).state("register",{url:"/register",templateUrl:"/html/register.html",controller:"registerCtrl"}).state("profile",{url:"/profile/:userId",templateUrl:"/html/profile.html",controller:"profileCtrl",resolve:{Profile:["User",function(e){return e.profile()}],ProfileByID:["User","$stateParams",function(e,t){return e.getProfile(t.userId)}]}}).state("users",{url:"/users",templateUrl:"/html/users.html",controller:"usersCtrl"}).state("business",{url:"/business",templateUrl:"/html/business.html",controller:"businessCtrl",resolve:{Profile:["User",function(e){return e.profile()}]}}).state("showBusiness",{url:"/business/:businessId",templateUrl:"html/showbusiness.html",controller:"showbusinessCtrl",resolve:{Profile:["User",function(e){return e.profile()}]}}),t.otherwise("/")}]);var app=angular.module("myApp");app.controller("businessCtrl",["$scope","User","$rootScope","Business","Profile",function(e,t,o,n,r){e.businesses=[];var s=r.favorites;e.searchBusiness=function(){n.searchYelp(e.newItem.searchParams).then(function(t){for(var o=0;o<s.length;o++)t.id===s[o]&&(e.toggleFave=!0);e.businesses.push(t)})["catch"](function(e){console.log("err in businessCtrl: ",e)})},e.searchBusiness2=function(){var t={};e.newItem.location&&(t.location=e.newItem.location),e.newItem.term&&(t.term=e.newItem.term),n.searchCatagories(t).then(function(t){e.toggleFave=new Array(t.businesses.length);for(var o=0;o<t.businesses.length;o++)for(var n=0;n<s.length;n++)console.log(),t.businesses[o].id===s[n]?e.toggleFave[o]=1:e.toggleFave[o]=0;e.businesses=t.businesses})["catch"](function(e){console.log("err in businessCtrl: ",e)})},e.favorite=function(o){e.toggleFave[o]=!e.toggleFave[o],t.addFavoriteToUser(r._id,e.businesses[o].id).then(n.addFavorite(e.businesses[o],r._id)).then(function(e){})["catch"](function(e){console.log("err in businessCtrl: ",e)})},e.unFavorite=function(o){e.toggleFave[o]=!e.toggleFave[o],t.removeFavoritefromUser(r._id,e.businesses[o].id).then(function(e){console.log("res:",e)})["catch"](function(e){console.log("err in businessCtrl: ",e)})}}]);var app=angular.module("myApp");app.controller("imageCtrl",["$scope","Upload","Profile","$rootScope",function(e,t,o,n){console.log("image ctrl"),n.currentUser=o,e.submit=function(){console.log("submit"),console.log("$scope.file:",e.file),t.upload({url:"/api/images",data:{photo:e.file,user:n.currentUser._id}}).then(function(t){console.log("res: ",t),e.savedImage=t.data})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("loginCtrl",["$scope","$state","$auth","$rootScope",function(e,t,o,n){console.log("loginCtrl!"),e.login=function(){o.login(e.user).then(function(e){console.log("res: ",e),t.go("profile")})["catch"](function(e){swal({title:"Error!",text:"Invalid Email or Password",type:"error",confirmButtonText:"Ok"})})}}]);var app=angular.module("myApp");app.controller("mainCtrl",["$scope","$state","$auth","$rootScope",function(e,t,o,n){n.currentUser,e.isAuthenticated=function(){return o.isAuthenticated()},e.logout=function(){o.logout(),t.go("home")},e.authenticate=function(e){o.authenticate(e).then(function(e){t.go("home")})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.controller("profileCtrl",["$scope","Profile","ProfileByID","$state","User","$rootScope","WallPost",function(e,t,o,n,r,s,l){s.currentUser=t,e.user=o||t,l.getWallPosts(e.user._id).then(function(t){e.userWallposts=t}),e.showdisplayNameForm=function(){console.log("show form"),e.displayNameForm=!0},e.updatedisplayName=function(){e.displayNameForm=!1,e.user.displayName=e.newItem.displayName,r.updateProfile(e.user._id,e.newItem).then(function(t){console.log("profile:",t),e.newItem.displayName=""})["catch"](function(e){console.log("err:",e)})},e.canceldisplayName=function(){e.usernameForm=!0,e.newItem.displayName=""},e.showPictureForm=function(){console.log("show form"),e.photoForm=!0},e.updatePicture=function(){e.photoForm=!1,console.log("$state.current: ",n.current),e.user.profileImage=e.newItem.profileImage,console.log("$scope.newItem:",e.newItem),r.updateProfile(e.user._id,e.newItem).then(function(t){console.log("profile:",t),e.newItem.profileImage=""})["catch"](function(e){console.log("err:",e)})},e.cancelPhotoUrl=function(){e.photoForm=!0,e.newItem.photoUrl=""},e.deleteAccount=function(e){console.log(e._id),r.deleteAccount(e._id).then()["catch"](function(e){console.log("err: ",e)})},e.submitMessage=function(){var t={to:e.user,from:s.currentUser._id,fromName:s.currentUser.displayName,text:e.newItem.text,createdAt:"add moment"};l.addWallPost(t).then(function(e){r.addWallPostToUser(o._id,e._id)}).then(n.go(n.$current,null,{reload:!0}))["catch"](function(e){console.log("err: ",e)})}}]);var app=angular.module("myApp");app.controller("registerCtrl",["$scope","$state","$auth",function(e,t,o){console.log("registerCtrl!"),e.register=function(){e.user.password!==e.user.password2?(e.user.password=null,e.user.password2=null,alert("Passwords must match!")):o.signup(e.user).then(function(e){console.log("res: ",e),t.go("login")})["catch"](function(e){swal({title:"Error!",text:"Invalid Email or Password",type:"error",confirmButtonText:"Ok"})})}}]);var app=angular.module("myApp");app.controller("showbusinessCtrl",["$scope","$stateParams","Business","Profile","User",function(e,t,o,n,r){e.showButton=!1,e.singletoggleFave=!1;var s=n.favorites,l=t;o.searchYelp(l.businessId).then(function(t){e.business=t,e.showButton=!0;for(var o=0;o<s.length;o++)s[o]===t.id&&(e.singletoggleFave=!0)})["catch"](function(e){console.log("err in businessCtrl: ",e)}),e.favorite=function(){e.singletoggleFave=!e.singletoggleFave,r.addFavoriteToUser(n._id,e.business.id).then(o.addFavorite(e.business,n._id)).then(function(e){})["catch"](function(e){console.log("err in businessCtrl: ",e)})},e.unFavorite=function(){e.singletoggleFave=!e.singletoggleFave,r.removeFavoritefromUser(n._id,e.business.id).then(function(e){})["catch"](function(e){console.log("err in businessCtrl: ",e)})}}]);var app=angular.module("myApp");app.controller("usersCtrl",["$scope","$$state","$state","User",function(e,t,o,n){var r=n.getAll();r.then(function(t){e.userFeed=t.data})}]);var app=angular.module("myApp");app.service("Business",["$http","$q",function(e,t){this.getMap=function(o){return e.get("/api/businesses/map",o).then(function(e){return t.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.searchYelp=function(o){return e.get("/api/businesses/yelp/"+o).then(function(e){return t.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.searchCatagories=function(o){return e.post("/api/businesses/yelp/yelpCatagories",o).then(function(e){return t.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.addFavorite=function(o,n){return e.post("/api/businesses/"+n,o).then(function(e){return t.resolve(e)})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.service("image",["$http","$q",function(e,t){this.getAll=function(){return e.get("/api/cruds")},this.getById=function(t){return e.get("/api/cruds/"+t)},this.addCrud=function(o){return e.post("/api/cruds",o).then(function(e){return t.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.deleteCrud=function(o){return e["delete"]("/api/cruds/"+o).then(function(){return t.resolve()})["catch"](function(e){console.log("err:",e)})},this.updateCrud=function(o,n){return e.put("/api/cruds/"+o,n).then(function(e){return t.resolve(n)})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.service("User",["$http","$q",function(e,t){this.profile=function(){return e.get("/api/users/profile").then(function(e){return t.resolve(e.data)})},this.getProfile=function(o){return e.get("/api/users/profile/"+o).then(function(e){return t.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.getAll=function(){return e.get("/api/users")},this.updateProfile=function(o,n){return e.put("/api/users/profile/"+o,n).then(function(e){return t.resolve()})["catch"](function(e){console.log("err:",e)})},this.deleteAccount=function(o){return e["delete"]("/api/users/profile/"+o).then(function(e){return t.resolve()})["catch"](function(e){console.log("err:",e)})},this.addFavoriteToUser=function(o,n){return e.put("/api/users/profile/"+o+"/add/"+n).then(function(e){return t.resolve()})["catch"](function(e){console.log("err:",e)})},this.removeFavoritefromUser=function(o,n){return e.put("/api/users/profile/"+o+"/remove/"+n).then(function(e){return t.resolve()})["catch"](function(e){console.log("err:",e)})}}]);var app=angular.module("myApp");app.service("WallPost",["$http","$q",function(e,t){this.addWallPost=function(o){return console.log("in add wallpost: ",o),e.post("/api/wallposts",o).then(function(e){return t.resolve(e.data)})["catch"](function(e){console.log("err:",e)})},this.getWallPosts=function(o){return e.get("/api/wallposts/"+o).then(function(e){return t.resolve(e.data)})["catch"](function(e){console.log("err: ",e)})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImNvbnRyb2xsZXJzL2J1c2luZXNzQ3RybC5qcyIsImNvbnRyb2xsZXJzL2ltYWdlQ3RybC5qcyIsImNvbnRyb2xsZXJzL2xvZ2luQ3RybC5qcyIsImNvbnRyb2xsZXJzL21haW5DdHJsLmpzIiwiY29udHJvbGxlcnMvcHJvZmlsZUN0cmwuanMiLCJjb250cm9sbGVycy9yZWdpc3RlckN0cmwuanMiLCJjb250cm9sbGVycy9zaG93YnVzaW5lc3NDdHJsLmpzIiwiY29udHJvbGxlcnMvdXNlcnNDdHJsLmpzIiwic2VydmljZXMvYnVzaW5lc3NzZXJ2aWNlcy5qcyIsInNlcnZpY2VzL2ltYWdlc2VydmljZXMuanMiLCJzZXJ2aWNlcy91c2Vyc2VydmljZXMuanMiLCJzZXJ2aWNlcy93YWxscG9zdHNlcnZpY2VzLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkYXV0aFByb3ZpZGVyIiwibG9naW5VcmwiLCJzaWdudXBVcmwiLCJmYWNlYm9vayIsImNsaWVudElkIiwidXJsIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJzdGF0ZSIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsInJlc29sdmUiLCJQcm9maWxlIiwiVXNlciIsInByb2ZpbGUiLCJQcm9maWxlQnlJRCIsIiRzdGF0ZVBhcmFtcyIsImdldFByb2ZpbGUiLCJ1c2VySWQiLCJvdGhlcndpc2UiLCIkc2NvcGUiLCIkcm9vdFNjb3BlIiwiQnVzaW5lc3MiLCJidXNpbmVzc2VzIiwiZmF2b3JpdGVzIiwic2VhcmNoQnVzaW5lc3MiLCJzZWFyY2hZZWxwIiwibmV3SXRlbSIsInNlYXJjaFBhcmFtcyIsInRoZW4iLCJyZXMiLCJpIiwibGVuZ3RoIiwiaWQiLCJ0b2dnbGVGYXZlIiwicHVzaCIsImVyciIsImNvbnNvbGUiLCJsb2ciLCJzZWFyY2hCdXNpbmVzczIiLCJzZWFyY2hCeSIsImxvY2F0aW9uIiwidGVybSIsInNlYXJjaENhdGFnb3JpZXMiLCJBcnJheSIsImsiLCJmYXZvcml0ZSIsImluZGV4IiwiYWRkRmF2b3JpdGVUb1VzZXIiLCJfaWQiLCJhZGRGYXZvcml0ZSIsInVuRmF2b3JpdGUiLCJyZW1vdmVGYXZvcml0ZWZyb21Vc2VyIiwiVXBsb2FkIiwiY3VycmVudFVzZXIiLCJzdWJtaXQiLCJmaWxlIiwidXBsb2FkIiwiZGF0YSIsInBob3RvIiwidXNlciIsInNhdmVkSW1hZ2UiLCIkc3RhdGUiLCIkYXV0aCIsImxvZ2luIiwiZ28iLCJzd2FsIiwidGl0bGUiLCJ0ZXh0IiwidHlwZSIsImNvbmZpcm1CdXR0b25UZXh0IiwiaXNBdXRoZW50aWNhdGVkIiwibG9nb3V0IiwiYXV0aGVudGljYXRlIiwicHJvdmlkZXIiLCJXYWxsUG9zdCIsImdldFdhbGxQb3N0cyIsInVzZXJXYWxscG9zdHMiLCJzaG93ZGlzcGxheU5hbWVGb3JtIiwiZGlzcGxheU5hbWVGb3JtIiwidXBkYXRlZGlzcGxheU5hbWUiLCJkaXNwbGF5TmFtZSIsInVwZGF0ZVByb2ZpbGUiLCJjYW5jZWxkaXNwbGF5TmFtZSIsInVzZXJuYW1lRm9ybSIsInNob3dQaWN0dXJlRm9ybSIsInBob3RvRm9ybSIsInVwZGF0ZVBpY3R1cmUiLCJjdXJyZW50IiwicHJvZmlsZUltYWdlIiwiY2FuY2VsUGhvdG9VcmwiLCJwaG90b1VybCIsImRlbGV0ZUFjY291bnQiLCJzdWJtaXRNZXNzYWdlIiwicG9zdE9iaiIsInRvIiwiZnJvbSIsImZyb21OYW1lIiwiY3JlYXRlZEF0IiwiYWRkV2FsbFBvc3QiLCJ3YWxscG9zdCIsImFkZFdhbGxQb3N0VG9Vc2VyIiwiJGN1cnJlbnQiLCJyZWxvYWQiLCJyZWdpc3RlciIsInBhc3N3b3JkIiwicGFzc3dvcmQyIiwiYWxlcnQiLCJzaWdudXAiLCJzaG93QnV0dG9uIiwic2luZ2xldG9nZ2xlRmF2ZSIsImJ1c2luZXNzSWQiLCJidXNpbmVzcyIsIiQkc3RhdGUiLCJ1c2VyUHJvbWlzZSIsImdldEFsbCIsInJlc3VsdCIsInVzZXJGZWVkIiwic2VydmljZSIsIiRodHRwIiwiJHEiLCJ0aGlzIiwiZ2V0TWFwIiwiY29yZHMiLCJnZXQiLCJzZWFyY2giLCJpbnB1dHMiLCJwb3N0IiwiYnVzaW5lc3NPYmoiLCJnZXRCeUlkIiwiYWRkQ3J1ZCIsImNydWQiLCJkZWxldGVDcnVkIiwidXBkYXRlQ3J1ZCIsInB1dCIsInByb2ZpbGVPYmoiLCJ5ZWxwSWQiXSwibWFwcGluZ3MiOiJBQUFBLFlBRUEsSUFBSUEsS0FBTUMsUUFBUUMsT0FBTyxTQUFVLFlBQWEsYUFBYyxnQkFFOURGLEtBQUlHLFFBQUEsZ0JBQU8sU0FBU0MsR0FFbEJBLEVBQWNDLFNBQVcsa0JBQ3pCRCxFQUFjRSxVQUFZLG1CQUUxQkYsRUFBY0csVUFDWkMsU0FBVSxrQkFDVkMsSUFBSywyQkFLVFQsSUFBSUcsUUFBQSxpQkFBQSxxQkFBTyxTQUFTTyxFQUFnQkMsR0FFbENELEVBQ0dFLE1BQU0sUUFBVUgsSUFBSyxJQUFLSSxZQUFhLG9CQUN2Q0QsTUFBTSxTQUNMSCxJQUFLLFNBQ0xJLFlBQWEsbUJBQ2JDLFdBQVksY0FFYkYsTUFBTSxZQUNMSCxJQUFLLFlBQ0xJLFlBQWEsc0JBQ2JDLFdBQVksaUJBRWJGLE1BQU0sV0FDTEgsSUFBSyxtQkFDTEksWUFBYSxxQkFDYkMsV0FBWSxjQUNaQyxTQUNFQyxTQUFBLE9BQVMsU0FBU0MsR0FDaEIsTUFBT0EsR0FBS0MsWUFFZEMsYUFBQSxPQUFBLGVBQWEsU0FBU0YsRUFBTUcsR0FDMUIsTUFBT0gsR0FBS0ksV0FBV0QsRUFBYUUsYUFJekNWLE1BQU0sU0FDTEgsSUFBSyxTQUNMSSxZQUFhLG1CQUNiQyxXQUFZLGNBRWJGLE1BQU0sWUFDTEgsSUFBSyxZQUNMSSxZQUFhLHNCQUNiQyxXQUFZLGVBQ1pDLFNBQ0VDLFNBQUEsT0FBUyxTQUFTQyxHQUNoQixNQUFPQSxHQUFLQyxlQUlqQk4sTUFBTSxnQkFDTEgsSUFBSyx3QkFDTEksWUFBYSx5QkFDYkMsV0FBWSxtQkFDWkMsU0FDRUMsU0FBQSxPQUFTLFNBQVNDLEdBQ2hC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Q0xDLFFBQVFDLElBQUksT0FBUUYsTUFJeEJxRixLQUFLekUsa0JBQW9CLFNBQUNmLEVBQUl1RyxHQUM1QixNQUFPakIsR0FBTWUsSUFBTixzQkFBZ0NyRyxFQUFoQyxRQUEwQ3VHLEdBQy9DM0csS0FBSyxTQUFBQyxHQUNILE1BQU8wRixHQUFHN0csWUFGUDRHLFNBSUEsU0FBQW5GLEdBQ0xDLFFBQVFDLElBQUksT0FBUUYsTUFJeEJxRixLQUFLckUsdUJBQXlCLFNBQUNuQixFQUFJdUcsR0FDakMsTUFBT2pCLEdBQU1lLElBQU4sc0JBQWdDckcsRUFBaEMsV0FBNkN1RyxHQUNsRDNHLEtBQUssU0FBQUMsR0FDSCxNQUFPMEYsR0FBRzdHLFlBRlA0RyxTQUlBLFNBQUFuRixHQUNMQyxRQUFRQyxJQUFJLE9BQVFGLFFDN0QxQixJQUFJeEMsS0FBTUMsUUFBUUMsT0FBTyxRQUV6QkYsS0FBSTBILFFBQVEsWUFBQSxRQUFBLEtBQVksU0FBU0MsRUFBT0MsR0FFcENDLEtBQUt0QixZQUFhLFNBQUNDLEdBRW5CLE1BREEvRCxTQUFRQyxJQUFJLG9CQUFxQjhELEdBQzFCbUIsRUFBTVEsS0FBTixpQkFBNkIzQixHQUNqQ3ZFLEtBQUssU0FBQUMsR0FDSixNQUFPMEYsR0FBRzdHLFFBQVFtQixFQUFJNEIsUUFGbkI2RCxTQUlFLFNBQUFuRixHQUNMQyxRQUFRQyxJQUFJLE9BQVFGLE1BS3hCcUYsS0FBSzdDLGFBQWUsU0FBQzFELEdBQ3JCLE1BQU9xRyxHQUFNSyxJQUFOLGtCQUE0QjFHLEdBQ2hDVyxLQUFLLFNBQUFDLEdBQ0osTUFBTzBGLEdBQUc3RyxRQUFRbUIsRUFBSTRCLFFBRm5CNkQsU0FJRSxTQUFBbkYsR0FDTEMsUUFBUUMsSUFBSSxRQUFTRiIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbJ3VpLnJvdXRlcicsICdzYXRlbGxpemVyJywgJ25nRmlsZVVwbG9hZCddKTtcblxuYXBwLmNvbmZpZyhmdW5jdGlvbigkYXV0aFByb3ZpZGVyKSB7XG5cbiAgJGF1dGhQcm92aWRlci5sb2dpblVybCA9ICdhcGkvdXNlcnMvbG9naW4nO1xuICAkYXV0aFByb3ZpZGVyLnNpZ251cFVybCA9ICdhcGkvdXNlcnMvc2lnbnVwJztcblxuICAkYXV0aFByb3ZpZGVyLmZhY2Vib29rKHtcbiAgICBjbGllbnRJZDogJzI1NTA2MDEyODIwOTE2NScsXG4gICAgdXJsOiAnL2FwaS91c2Vycy9mYWNlYm9vaydcbiAgfSk7XG5cbn0pO1xuXG5hcHAuY29uZmlnKGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcblxuICAkc3RhdGVQcm92aWRlclxuICAgIC5zdGF0ZSgnaG9tZScsIHsgdXJsOiAnLycsIHRlbXBsYXRlVXJsOiAnL2h0bWwvaG9tZS5odG1sJyB9KVxuICAgIC5zdGF0ZSgnbG9naW4nLCB7XG4gICAgICB1cmw6ICcvbG9naW4nLFxuICAgICAgdGVtcGxhdGVVcmw6ICcvaHRtbC9sb2dpbi5odG1sJyxcbiAgICAgIGNvbnRyb2xsZXI6ICdsb2dpbkN0cmwnXG4gICAgfSlcbiAgICAuc3RhdGUoJ3JlZ2lzdGVyJywge1xuICAgICAgdXJsOiAnL3JlZ2lzdGVyJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvcmVnaXN0ZXIuaHRtbCcsXG4gICAgICBjb250cm9sbGVyOiAncmVnaXN0ZXJDdHJsJ1xuICAgIH0pXG4gICAgLnN0YXRlKCdwcm9maWxlJywge1xuICAgICAgdXJsOiAnL3Byb2ZpbGUvOnVzZXJJZCcsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL3Byb2ZpbGUuaHRtbCcsXG4gICAgICBjb250cm9sbGVyOiAncHJvZmlsZUN0cmwnLFxuICAgICAgcmVzb2x2ZToge1xuICAgICAgICBQcm9maWxlOiBmdW5jdGlvbihVc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIFVzZXIucHJvZmlsZSgpO1xuICAgICAgICB9LFxuICAgICAgICBQcm9maWxlQnlJRDogZnVuY3Rpb24oVXNlciwgJHN0YXRlUGFyYW1zKXtcbiAgICAgICAgICByZXR1cm4gVXNlci5nZXRQcm9maWxlKCRzdGF0ZVBhcmFtcy51c2VySWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuc3RhdGUoJ3VzZXJzJywge1xuICAgICAgdXJsOiAnL3VzZXJzJyxcbiAgICAgIHRlbXBsYXRlVXJsOiAnL2h0bWwvdXNlcnMuaHRtbCcsXG4gICAgICBjb250cm9sbGVyOiAndXNlcnNDdHJsJ1xuICAgIH0pXG4gICAgLnN0YXRlKCdidXNpbmVzcycsIHtcbiAgICAgIHVybDogJy9idXNpbmVzcycsXG4gICAgICB0ZW1wbGF0ZVVybDogJy9odG1sL2J1c2luZXNzLmh0bWwnLFxuICAgICAgY29udHJvbGxlcjogJ2J1c2luZXNzQ3RybCcsXG4gICAgICByZXNvbHZlOiB7XG4gICAgICAgIFByb2ZpbGU6IGZ1bmN0aW9uKFVzZXIpIHtcbiAgICAgICAgICByZXR1cm4gVXNlci5wcm9maWxlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIC5zdGF0ZSgnc2hvd0J1c2luZXNzJywge1xuICAgICAgdXJsOiAnL2J1c2luZXNzLzpidXNpbmVzc0lkJywgXG4gICAgICB0ZW1wbGF0ZVVybDogJ2h0bWwvc2hvd2J1c2luZXNzLmh0bWwnLCBcbiAgICAgIGNvbnRyb2xsZXI6ICdzaG93YnVzaW5lc3NDdHJsJywgICAgICBcbiAgICAgIHJlc29sdmU6IHtcbiAgICAgICAgUHJvZmlsZTogZnVuY3Rpb24oVXNlcikge1xuICAgICAgICAgIHJldHVybiBVc2VyLnByb2ZpbGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgfSlcbiAgICBcbiAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xufSk7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxubGV0IGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdteUFwcCcpO1xuXG5hcHAuY29udHJvbGxlcignYnVzaW5lc3NDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBVc2VyLCAkcm9vdFNjb3BlLCBCdXNpbmVzcywgUHJvZmlsZSl7XG5cbiAgJHNjb3BlLmJ1c2luZXNzZXMgPSBbXTtcbiAgdmFyIGZhdm9yaXRlcyA9IFByb2ZpbGUuZmF2b3JpdGVzO1xuXG4gICRzY29wZS5zZWFyY2hCdXNpbmVzcyA9ICgpID0+IHtcbiAgICAgIEJ1c2luZXNzLnNlYXJjaFllbHAoJHNjb3BlLm5ld0l0ZW0uc2VhcmNoUGFyYW1zKVxuICAgICAgLnRoZW4ocmVzID0+e1xuICAgICAgICBmb3IodmFyIGk9MDsgaTwgZmF2b3JpdGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICBpZihyZXMuaWQgPT09IGZhdm9yaXRlc1tpXSl7XG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlRmF2ZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICRzY29wZS5idXNpbmVzc2VzLnB1c2gocmVzKTtcbiAgICAgIH0pICAgIFxuICAgICAgLmNhdGNoKGVyciA9PntcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnIgaW4gYnVzaW5lc3NDdHJsOiBcIiwgZXJyKTtcbiAgICAgIH0pXG4gICAgfVxuXG4gICRzY29wZS5zZWFyY2hCdXNpbmVzczIgPSAoKSA9PiB7XG4gICAgICB2YXIgc2VhcmNoQnkgPSB7fTtcbiAgICAgIGlmKCRzY29wZS5uZXdJdGVtLmxvY2F0aW9uKXtcbiAgICAgICAgc2VhcmNoQnkubG9jYXRpb24gPSAkc2NvcGUubmV3SXRlbS5sb2NhdGlvblxuICAgICAgfVxuICAgICAgaWYoJHNjb3BlLm5ld0l0ZW0udGVybSl7XG4gICAgICAgIHNlYXJjaEJ5LnRlcm0gPSAkc2NvcGUubmV3SXRlbS50ZXJtO1xuICAgICAgfVxuXG4gICAgICBCdXNpbmVzcy5zZWFyY2hDYXRhZ29yaWVzKHNlYXJjaEJ5KVxuICAgICAgLnRoZW4ocmVzID0+e1xuICAgICAgICAkc2NvcGUudG9nZ2xlRmF2ZSA9IG5ldyBBcnJheShyZXMuYnVzaW5lc3Nlcy5sZW5ndGgpXG5cbiAgICAgICAgLy9jaGVjayBmb3IgZmF2b3JpdGVzXG4gICAgICAgIGZvcih2YXIgaz0wOyBrPHJlcy5idXNpbmVzc2VzLmxlbmd0aDsgaysrKXtcbiAgICAgICAgICBmb3IodmFyIGk9MDsgaTwgZmF2b3JpdGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKClcbiAgICAgICAgICAgIGlmKHJlcy5idXNpbmVzc2VzW2tdLmlkID09PSBmYXZvcml0ZXNbaV0pe1xuICAgICAgICAgICAgICAkc2NvcGUudG9nZ2xlRmF2ZVtrXSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlICRzY29wZS50b2dnbGVGYXZlW2tdID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgJHNjb3BlLmJ1c2luZXNzZXMgPSByZXMuYnVzaW5lc3NlcztcblxuICAgICAgfSkgICAgXG4gICAgICAuY2F0Y2goZXJyID0+e1xuICAgICAgICBjb25zb2xlLmxvZyhcImVyciBpbiBidXNpbmVzc0N0cmw6IFwiLCBlcnIpO1xuICAgICAgfSlcbiAgICB9XG5cblxuICAgIC8vYWRkIHRvIHVzZXIgZmF2b3JpdGVzXG4gICAgJHNjb3BlLmZhdm9yaXRlID0gKGluZGV4KT0+e1xuICAgICAgJHNjb3BlLnRvZ2dsZUZhdmVbaW5kZXhdID0gISRzY29wZS50b2dnbGVGYXZlW2luZGV4XTtcbiAgICAgIFVzZXIuYWRkRmF2b3JpdGVUb1VzZXIoIFByb2ZpbGUuX2lkLCAkc2NvcGUuYnVzaW5lc3Nlc1tpbmRleF0uaWQpXG4gICAgICAudGhlbihCdXNpbmVzcy5hZGRGYXZvcml0ZSgkc2NvcGUuYnVzaW5lc3Nlc1tpbmRleF0sIFByb2ZpbGUuX2lkKSlcbiAgICAgIC50aGVuKHJlcyA9PntcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInJlczpcIiAsIHJlcyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PntcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnIgaW4gYnVzaW5lc3NDdHJsOiBcIiwgZXJyKTtcbiAgICAgIH0pICAgIFxuICAgIH1cblxuICAgICRzY29wZS51bkZhdm9yaXRlID0gKGluZGV4KT0+e1xuICAgICAgJHNjb3BlLnRvZ2dsZUZhdmVbaW5kZXhdID0gISRzY29wZS50b2dnbGVGYXZlW2luZGV4XTtcbiAgICAgIFVzZXIucmVtb3ZlRmF2b3JpdGVmcm9tVXNlciggUHJvZmlsZS5faWQsICRzY29wZS5idXNpbmVzc2VzW2luZGV4XS5pZClcbiAgICAgIC8vLnRoZW4oQnVzaW5lc3MucmVtb3ZlRmF2b3JpdGUoJHNjb3BlLmJ1c2luZXNzZXNbaW5kZXhdLCBQcm9maWxlLl9pZCkpXG4gICAgICAudGhlbihyZXMgPT57XG4gICAgICAgIGNvbnNvbGUubG9nKFwicmVzOlwiICwgcmVzKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+e1xuICAgICAgICBjb25zb2xlLmxvZyhcImVyciBpbiBidXNpbmVzc0N0cmw6IFwiLCBlcnIpO1xuICAgICAgfSkgICAgXG4gICAgfVxuXG59KTsiLCIndXNlIHN0cmljdCc7XG5cbmxldCBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnKTtcblxuYXBwLmNvbnRyb2xsZXIoJ2ltYWdlQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgVXBsb2FkLCBQcm9maWxlLCAkcm9vdFNjb3BlKSB7XG4gIGNvbnNvbGUubG9nKFwiaW1hZ2UgY3RybFwiKTtcblxuXG4gICRyb290U2NvcGUuY3VycmVudFVzZXIgPSBQcm9maWxlO1xuXG4gICRzY29wZS5zdWJtaXQgPSAoKSA9PntcbiAgICBjb25zb2xlLmxvZygnc3VibWl0Jyk7XG4gICAgY29uc29sZS5sb2coJyRzY29wZS5maWxlOicsICRzY29wZS5maWxlKTtcbiAgICBcbiAgICBVcGxvYWQudXBsb2FkKHtcbiAgICAgIHVybDogJy9hcGkvaW1hZ2VzJyxcbiAgICAgIGRhdGE6IHtwaG90bzogJHNjb3BlLmZpbGUsIHVzZXI6ICRyb290U2NvcGUuY3VycmVudFVzZXIuX2lkfSAvL2FueXRoaW5nIGVsc2UgbGlrZSBuYW1lIHdpbGwgZW5kIHVwIGluIHJlcS5ib2R5XG4gICAgfSlcbiAgICAudGhlbihyZXMgPT57XG4gICAgICBjb25zb2xlLmxvZygncmVzOiAnLCByZXMpO1xuICAgICAgJHNjb3BlLnNhdmVkSW1hZ2UgPSByZXMuZGF0YTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT57XG4gICAgICBjb25zb2xlLmxvZyhcImVycjpcIiwgZXJyKVxuICAgIH0pXG4gIH07XG5cbn0pO1xuXG5cbiIsIlxuJ3VzZSBzdHJpY3QnO1xuXG5sZXQgYXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJyk7XG5cbmFwcC5jb250cm9sbGVyKCdsb2dpbkN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgJGF1dGgsICRyb290U2NvcGUpIHtcbiAgY29uc29sZS5sb2coJ2xvZ2luQ3RybCEnKTtcblxuICAkc2NvcGUubG9naW4gPSAoKSA9PiB7XG4gICAgICAkYXV0aC5sb2dpbigkc2NvcGUudXNlcilcbiAgICAgIC50aGVuKHJlcyA9PntcbiAgICAgICAgY29uc29sZS5sb2coXCJyZXM6IFwiLCByZXMpO1xuICAgICAgICAvLyRyb290U2NvcGUuY3VycmVudFVzZXIgPSByZXMuZGF0YTtcbiAgICAgICAgJHN0YXRlLmdvKCdwcm9maWxlJyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PntcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImVycjpcIiwgZXJyKTtcbiAgICAgICAgc3dhbCh7ICAgdGl0bGU6IFwiRXJyb3IhXCIsICAgdGV4dDogXCJJbnZhbGlkIEVtYWlsIG9yIFBhc3N3b3JkXCIsICAgdHlwZTogXCJlcnJvclwiLCAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rXCIgfSk7XG4gICAgICB9KVxuICAgIH07XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbmxldCBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnKTtcblxuYXBwLmNvbnRyb2xsZXIoJ21haW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsICRhdXRoLCAkcm9vdFNjb3BlKSB7XG5cbiAgJHJvb3RTY29wZS5jdXJyZW50VXNlcjtcblxuICAkc2NvcGUuaXNBdXRoZW50aWNhdGVkID0gKCkgPT4gJGF1dGguaXNBdXRoZW50aWNhdGVkKCk7XG5cbiAgJHNjb3BlLmxvZ291dCA9ICgpID0+IHtcbiAgICAkYXV0aC5sb2dvdXQoKTtcbiAgICAkc3RhdGUuZ28oJ2hvbWUnKTtcbiAgfTtcblxuICAkc2NvcGUuYXV0aGVudGljYXRlID0gcHJvdmlkZXIgPT4ge1xuICAgICRhdXRoLmF1dGhlbnRpY2F0ZShwcm92aWRlcilcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgICRzdGF0ZS5nbygnaG9tZScpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyOicsIGVycik7XG4gICAgICB9KVxuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmxldCBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnKTtcblxuYXBwLmNvbnRyb2xsZXIoJ3Byb2ZpbGVDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCBQcm9maWxlLCBQcm9maWxlQnlJRCwgJHN0YXRlLCBVc2VyLCAkcm9vdFNjb3BlLCBXYWxsUG9zdCkge1xuICBcbiAgJHJvb3RTY29wZS5jdXJyZW50VXNlciA9IFByb2ZpbGU7XG5cbiAgJHNjb3BlLnVzZXIgPSBQcm9maWxlQnlJRCB8fCBQcm9maWxlO1xuXG4gIFdhbGxQb3N0LmdldFdhbGxQb3N0cygkc2NvcGUudXNlci5faWQpXG4gICAgLnRoZW4ocmVzID0+e1xuICAgICRzY29wZS51c2VyV2FsbHBvc3RzID0gcmVzO1xuICB9KVxuXG4gICRzY29wZS5zaG93ZGlzcGxheU5hbWVGb3JtID0gKCkgPT57XG4gICAgY29uc29sZS5sb2coXCJzaG93IGZvcm1cIik7XG4gICAgJHNjb3BlLmRpc3BsYXlOYW1lRm9ybSA9IHRydWU7XG4gIH1cblxuICAkc2NvcGUudXBkYXRlZGlzcGxheU5hbWUgPSAoKSA9PiB7XG4gICAgJHNjb3BlLmRpc3BsYXlOYW1lRm9ybSA9IGZhbHNlO1xuICAgICRzY29wZS51c2VyLmRpc3BsYXlOYW1lID0gJHNjb3BlLm5ld0l0ZW0uZGlzcGxheU5hbWU7XG4gICAgVXNlci51cGRhdGVQcm9maWxlKCRzY29wZS51c2VyLl9pZCwgJHNjb3BlLm5ld0l0ZW0pXG4gICAgICAudGhlbihwcm9maWxlID0+e1xuICAgICAgICBjb25zb2xlLmxvZyhcInByb2ZpbGU6XCIsIHByb2ZpbGUpO1xuICAgICAgICAkc2NvcGUubmV3SXRlbS5kaXNwbGF5TmFtZSA9ICcnO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT57XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXJyOlwiLCBlcnIpO1xuICAgICAgfSlcbiAgfVxuXG4gICRzY29wZS5jYW5jZWxkaXNwbGF5TmFtZSA9ICgpID0+e1xuICAgICRzY29wZS51c2VybmFtZUZvcm0gPSB0cnVlO1xuICAgICRzY29wZS5uZXdJdGVtLmRpc3BsYXlOYW1lID0gJyc7XG4gIH1cblxuLy9waG90b1xuICAkc2NvcGUuc2hvd1BpY3R1cmVGb3JtID0gKCkgPT57XG4gICAgY29uc29sZS5sb2coXCJzaG93IGZvcm1cIik7XG4gICAgJHNjb3BlLnBob3RvRm9ybSA9IHRydWU7XG4gIH1cblxuICAkc2NvcGUudXBkYXRlUGljdHVyZSA9ICgpID0+IHtcbiAgICAkc2NvcGUucGhvdG9Gb3JtID0gZmFsc2U7XG4gICAgY29uc29sZS5sb2coXCIkc3RhdGUuY3VycmVudDogXCIsICRzdGF0ZS5jdXJyZW50KTtcbiAgICAkc2NvcGUudXNlci5wcm9maWxlSW1hZ2UgPSAkc2NvcGUubmV3SXRlbS5wcm9maWxlSW1hZ2U7XG4gICAgY29uc29sZS5sb2coXCIkc2NvcGUubmV3SXRlbTpcIiwgJHNjb3BlLm5ld0l0ZW0pO1xuICAgIFVzZXIudXBkYXRlUHJvZmlsZSgkc2NvcGUudXNlci5faWQsICRzY29wZS5uZXdJdGVtKVxuICAgICAgLnRoZW4ocHJvZmlsZSA9PntcbiAgICAgICAgY29uc29sZS5sb2coXCJwcm9maWxlOlwiLCBwcm9maWxlKTtcbiAgICAgICAgJHNjb3BlLm5ld0l0ZW0ucHJvZmlsZUltYWdlID0gJyc7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PntcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnI6XCIsIGVycik7XG4gICAgICB9KVxuICB9XG5cbiAgJHNjb3BlLmNhbmNlbFBob3RvVXJsID0gKCkgPT57XG4gICAgJHNjb3BlLnBob3RvRm9ybSA9IHRydWU7XG4gICAgJHNjb3BlLm5ld0l0ZW0ucGhvdG9VcmwgPSAnJztcbiAgfVxuXG5cbiAgJHNjb3BlLmRlbGV0ZUFjY291bnQgPSAodXNlcikgPT57XG4gICAgLy9hZGQgc3dhbFxuICAgIGNvbnNvbGUubG9nKHVzZXIuX2lkKTtcbiAgICBVc2VyLmRlbGV0ZUFjY291bnQodXNlci5faWQpXG4gICAgICAudGhlbigpXG4gICAgICAuY2F0Y2goZXJyID0+e1xuICAgICAgICBjb25zb2xlLmxvZyhcImVycjogXCIsIGVycik7XG4gICAgICB9KTtcbiAgfVxuXG4gICAgJHNjb3BlLnN1Ym1pdE1lc3NhZ2UgPSAoKSA9PntcblxuICAgIHZhciBwb3N0T2JqID0ge1xuICAgICAgdG86ICRzY29wZS51c2VyLFxuICAgICAgZnJvbTogJHJvb3RTY29wZS5jdXJyZW50VXNlci5faWQsXG4gICAgICBmcm9tTmFtZTogJHJvb3RTY29wZS5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSxcbiAgICAgIHRleHQ6ICRzY29wZS5uZXdJdGVtLnRleHQsXG4gICAgICBjcmVhdGVkQXQ6IFwiYWRkIG1vbWVudFwiXG4gICAgfTtcblxuXG4gICAgV2FsbFBvc3QuYWRkV2FsbFBvc3QocG9zdE9iailcbiAgICAgIC50aGVuKHdhbGxwb3N0ID0+e1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwid2FsbHBvc3Q6XCIgLCB3YWxscG9zdCk7XG4gICAgICAgIFVzZXIuYWRkV2FsbFBvc3RUb1VzZXIoUHJvZmlsZUJ5SUQuX2lkLCB3YWxscG9zdC5faWQpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCRzdGF0ZS5nbygkc3RhdGUuJGN1cnJlbnQsIG51bGwsIHsgcmVsb2FkOiB0cnVlIH0pKVxuICAgICAgLmNhdGNoKGVyciA9PntcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnI6IFwiLCBlcnIpO1xuICAgICAgfSlcbiAgIH07XG5cblxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5sZXQgYXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJyk7XG5cbmFwcC5jb250cm9sbGVyKCdyZWdpc3RlckN0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgJGF1dGgpIHtcbiAgY29uc29sZS5sb2coJ3JlZ2lzdGVyQ3RybCEnKTtcblxuICAkc2NvcGUucmVnaXN0ZXIgPSAoKSA9PiB7XG4gICAgaWYoJHNjb3BlLnVzZXIucGFzc3dvcmQgIT09ICRzY29wZS51c2VyLnBhc3N3b3JkMil7XG4gICAgICAkc2NvcGUudXNlci5wYXNzd29yZCA9IG51bGw7XG4gICAgICAkc2NvcGUudXNlci5wYXNzd29yZDIgPSBudWxsO1xuICAgICAgYWxlcnQoJ1Bhc3N3b3JkcyBtdXN0IG1hdGNoIScpO1xuICAgIH1lbHNle1xuICAgICAgJGF1dGguc2lnbnVwKCRzY29wZS51c2VyKVxuICAgICAgLnRoZW4ocmVzID0+e1xuICAgICAgICBjb25zb2xlLmxvZyhcInJlczogXCIsIHJlcyk7XG4gICAgICAgICRzdGF0ZS5nbygnbG9naW4nKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+e1xuICAgICAgICAvL2NvbnNvbGUubG9nKFwiZXJyOlwiLCBlcnIpO1xuICAgICAgICBzd2FsKHsgICB0aXRsZTogXCJFcnJvciFcIiwgICB0ZXh0OiBcIkludmFsaWQgRW1haWwgb3IgUGFzc3dvcmRcIiwgICB0eXBlOiBcImVycm9yXCIsICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2tcIiB9KTtcbiAgICAgIH0pXG4gICAgfVxuICB9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuXG5sZXQgYXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJyk7XG5cblxuYXBwLmNvbnRyb2xsZXIoJ3Nob3didXNpbmVzc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZVBhcmFtcywgQnVzaW5lc3MsIFByb2ZpbGUsIFVzZXIpIHtcblxuICAkc2NvcGUuc2hvd0J1dHRvbiA9IGZhbHNlO1xuICAkc2NvcGUuc2luZ2xldG9nZ2xlRmF2ZSA9IGZhbHNlO1xuICB2YXIgZmF2b3JpdGVzID0gUHJvZmlsZS5mYXZvcml0ZXM7XG5cbiAgbGV0IGJ1c2luZXNzSWQgPSAkc3RhdGVQYXJhbXM7XG5cbiAgQnVzaW5lc3Muc2VhcmNoWWVscChidXNpbmVzc0lkLmJ1c2luZXNzSWQpXG4gIC50aGVuKHJlcyA9PntcbiAgICAkc2NvcGUuYnVzaW5lc3MgPSByZXM7XG4gICAgJHNjb3BlLnNob3dCdXR0b24gPSB0cnVlO1xuICAgIGZvcih2YXIgaSA9MDsgaTwgZmF2b3JpdGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGlmKGZhdm9yaXRlc1tpXSA9PT0gcmVzLmlkKXtcbiAgICAgICAgJHNjb3BlLnNpbmdsZXRvZ2dsZUZhdmUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSkgICBcbiAgLmNhdGNoKGVyciA9PntcbiAgICBjb25zb2xlLmxvZyhcImVyciBpbiBidXNpbmVzc0N0cmw6IFwiLCBlcnIpO1xuICB9KVxuXG4gICRzY29wZS5mYXZvcml0ZSA9ICgpPT57XG4gICAgICAkc2NvcGUuc2luZ2xldG9nZ2xlRmF2ZSA9ICEkc2NvcGUuc2luZ2xldG9nZ2xlRmF2ZTtcbiAgICAgIFVzZXIuYWRkRmF2b3JpdGVUb1VzZXIoIFByb2ZpbGUuX2lkLCAkc2NvcGUuYnVzaW5lc3MuaWQpXG4gICAgICAudGhlbihCdXNpbmVzcy5hZGRGYXZvcml0ZSgkc2NvcGUuYnVzaW5lc3MsIFByb2ZpbGUuX2lkKSlcbiAgICAgIC50aGVuKHJlcyA9PntcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcInJlczpcIiAsIHJlcyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PntcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnIgaW4gYnVzaW5lc3NDdHJsOiBcIiwgZXJyKTtcbiAgICAgIH0pICAgIFxuICAgIH1cblxuXG4gICAgJHNjb3BlLnVuRmF2b3JpdGUgPSAoKT0+e1xuICAgICAgJHNjb3BlLnNpbmdsZXRvZ2dsZUZhdmUgPSAhJHNjb3BlLnNpbmdsZXRvZ2dsZUZhdmU7XG4gICAgICBVc2VyLnJlbW92ZUZhdm9yaXRlZnJvbVVzZXIoIFByb2ZpbGUuX2lkLCAkc2NvcGUuYnVzaW5lc3MuaWQpXG4gICAgICAvLy50aGVuKEJ1c2luZXNzLnJlbW92ZUZhdm9yaXRlKCRzY29wZS5idXNpbmVzc2VzW2luZGV4XSwgUHJvZmlsZS5faWQpKVxuICAgICAgLnRoZW4ocmVzID0+e1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT57XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXJyIGluIGJ1c2luZXNzQ3RybDogXCIsIGVycik7XG4gICAgICB9KSAgICBcbiAgICB9XG5cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJyk7XG5cbmFwcC5jb250cm9sbGVyKCd1c2Vyc0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsICQkc3RhdGUsICRzdGF0ZSwgVXNlcikge1xuXG4gIHZhciB1c2VyUHJvbWlzZSA9IFVzZXIuZ2V0QWxsKCk7XG4gIHVzZXJQcm9taXNlLnRoZW4oXG4gICAgZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgJHNjb3BlLnVzZXJGZWVkID0gcmVzdWx0LmRhdGE7XG4gICAgfSk7XG59KTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnKTtcblxuYXBwLnNlcnZpY2UoJ0J1c2luZXNzJywgZnVuY3Rpb24oJGh0dHAsICRxKXtcblxuICB0aGlzLmdldE1hcCA9IChjb3JkcykgPT57XG4gICAgcmV0dXJuICRodHRwLmdldChgL2FwaS9idXNpbmVzc2VzL21hcGAsIGNvcmRzKVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIHJldHVybiAkcS5yZXNvbHZlKHJlcy5kYXRhKTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT4geyAgIFxuICAgICAgICBjb25zb2xlLmxvZygnZXJyOicsIGVycik7XG4gICAgfSlcbiAgfVxuXG4gIHRoaXMuc2VhcmNoWWVscCA9IChzZWFyY2gpID0+e1xuICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvYnVzaW5lc3Nlcy95ZWxwLyR7c2VhcmNofWApXG4gICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIHJldHVybiAkcS5yZXNvbHZlKHJlcy5kYXRhKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHsgICBcbiAgICAgICAgY29uc29sZS5sb2coJ2VycjonLCBlcnIpO1xuICAgICAgfSlcbiAgfVxuXG4gIHRoaXMuc2VhcmNoQ2F0YWdvcmllcyA9IChpbnB1dHMpID0+e1xuICAgIHJldHVybiAkaHR0cC5wb3N0KGAvYXBpL2J1c2luZXNzZXMveWVscC95ZWxwQ2F0YWdvcmllc2AsIGlucHV0cylcbiAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuICRxLnJlc29sdmUocmVzLmRhdGEpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4geyAgIFxuICAgICAgICBjb25zb2xlLmxvZygnZXJyOicsIGVycik7XG4gICAgICB9KVxuICB9XG5cbiAgdGhpcy5hZGRGYXZvcml0ZSA9IChidXNpbmVzc09iaiwgdXNlcklkKSA9PntcbiAgICByZXR1cm4gJGh0dHAucG9zdChgL2FwaS9idXNpbmVzc2VzLyR7dXNlcklkfWAsIGJ1c2luZXNzT2JqKVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIHJldHVybiAkcS5yZXNvbHZlKHJlcyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7ICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnI6JywgZXJyKTtcbiAgICAgIH0pXG4gICAgfTtcbn0pO1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnKTtcblxuYXBwLnNlcnZpY2UoJ2ltYWdlJywgZnVuY3Rpb24oJGh0dHAsICRxKXtcblxuICB0aGlzLmdldEFsbCA9ICgpID0+e1xuICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvY3J1ZHMnKTtcbiAgfVxuXG4gIHRoaXMuZ2V0QnlJZCA9IGlkID0+e1xuICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvY3J1ZHMvJHtpZH1gKTtcbiAgfVxuXG4gIHRoaXMuYWRkQ3J1ZD0gKGNydWQpID0+e1xuICAgIHJldHVybiAkaHR0cC5wb3N0KGAvYXBpL2NydWRzYCwgY3J1ZClcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIHJldHVybiAkcS5yZXNvbHZlKHJlcy5kYXRhKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHsgICBcbiAgICAgICAgY29uc29sZS5sb2coJ2VycjonLCBlcnIpO1xuICAgICAgfSlcbiAgICB9O1xuXG4gIHRoaXMuZGVsZXRlQ3J1ZCA9IChpZCkgPT57XG4gICAgcmV0dXJuICRodHRwLmRlbGV0ZShgL2FwaS9jcnVkcy8ke2lkfWApXG4gICAgICAudGhlbiggKCkgPT4ge1xuICAgICAgICByZXR1cm4gJHEucmVzb2x2ZSgpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnIgPT4geyAgIFxuICAgICAgICBjb25zb2xlLmxvZygnZXJyOicsIGVycik7XG4gICAgICB9KVxuICAgIH07XG5cbiAgdGhpcy51cGRhdGVDcnVkID0gKGlkLCBjcnVkKSA9PntcbiAgICAgIHJldHVybiAkaHR0cC5wdXQoYC9hcGkvY3J1ZHMvJHtpZH1gLCBjcnVkKVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuICRxLnJlc29sdmUoY3J1ZCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7ICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnI6JywgZXJyKTtcbiAgICAgIH0pXG4gICAgfTtcblxufSk7XG5cbi8vaW4gcmVzaWRlbnRzIFJlc2lkZW50LmdldEFsbCgpXG4vLyAgICAgICAgICAgICAgICAudGhlbihyZXNpZGVudHMgPT57fSkiLCIndXNlIHN0cmljdCc7XG5cbnZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnKTtcblxuYXBwLnNlcnZpY2UoJ1VzZXInLCBmdW5jdGlvbigkaHR0cCwgJHEpIHtcblxuICB0aGlzLnByb2ZpbGUgPSAoKSA9PiB7XG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy9wcm9maWxlJylcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIHJldHVybiAkcS5yZXNvbHZlKHJlcy5kYXRhKTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIHRoaXMuZ2V0UHJvZmlsZSA9IChpZCkgPT57XG4gICAgIHJldHVybiAkaHR0cC5nZXQoYC9hcGkvdXNlcnMvcHJvZmlsZS8ke2lkfWApXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuICRxLnJlc29sdmUocmVzLmRhdGEpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PntcbiAgICAgIGNvbnNvbGUubG9nKFwiZXJyOlwiLCBlcnIpO1xuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5nZXRBbGwgPSAoKSA9PntcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJyk7XG4gIH1cblxuICB0aGlzLnVwZGF0ZVByb2ZpbGUgPSAoaWQsIHByb2ZpbGVPYmopID0+e1xuICAgIHJldHVybiAkaHR0cC5wdXQoYC9hcGkvdXNlcnMvcHJvZmlsZS8ke2lkfWAsICBwcm9maWxlT2JqKVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIHJldHVybiAkcS5yZXNvbHZlKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+e1xuICAgICAgY29uc29sZS5sb2coXCJlcnI6XCIsIGVycik7XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLmRlbGV0ZUFjY291bnQgPSAoaWQpID0+e1xuICAgIHJldHVybiAkaHR0cC5kZWxldGUoYC9hcGkvdXNlcnMvcHJvZmlsZS8ke2lkfWApXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuICRxLnJlc29sdmUoKTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT57XG4gICAgICBjb25zb2xlLmxvZyhcImVycjpcIiwgZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRoaXMuYWRkRmF2b3JpdGVUb1VzZXIgPSAoaWQsIHllbHBJZCkgPT57XG4gICAgcmV0dXJuICRodHRwLnB1dChgL2FwaS91c2Vycy9wcm9maWxlLyR7aWR9L2FkZC8ke3llbHBJZH1gKVxuICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICByZXR1cm4gJHEucmVzb2x2ZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PntcbiAgICAgIGNvbnNvbGUubG9nKFwiZXJyOlwiLCBlcnIpO1xuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5yZW1vdmVGYXZvcml0ZWZyb21Vc2VyID0gKGlkLCB5ZWxwSWQpID0+e1xuICAgIHJldHVybiAkaHR0cC5wdXQoYC9hcGkvdXNlcnMvcHJvZmlsZS8ke2lkfS9yZW1vdmUvJHt5ZWxwSWR9YClcbiAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuICRxLnJlc29sdmUoKTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT57XG4gICAgICBjb25zb2xlLmxvZyhcImVycjpcIiwgZXJyKTtcbiAgICB9KTtcbiAgfVxuIFxuXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdteUFwcCcpO1xuXG5hcHAuc2VydmljZSgnV2FsbFBvc3QnLCBmdW5jdGlvbigkaHR0cCwgJHEpIHtcblxuICAgIHRoaXMuYWRkV2FsbFBvc3Q9ICh3YWxscG9zdCkgPT57XG4gICAgY29uc29sZS5sb2coXCJpbiBhZGQgd2FsbHBvc3Q6IFwiLCB3YWxscG9zdCk7XG4gICAgcmV0dXJuICRodHRwLnBvc3QoYC9hcGkvd2FsbHBvc3RzYCwgd2FsbHBvc3QpXG4gICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICByZXR1cm4gJHEucmVzb2x2ZShyZXMuZGF0YSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVyciA9PiB7ICAgXG4gICAgICAgIGNvbnNvbGUubG9nKCdlcnI6JywgZXJyKTtcbiAgICAgIH0pXG4gICAgfTtcblxuXG4gICAgdGhpcy5nZXRXYWxsUG9zdHMgPSAodXNlcklkKSA9PntcbiAgICByZXR1cm4gJGh0dHAuZ2V0KGAvYXBpL3dhbGxwb3N0cy8ke3VzZXJJZH1gKVxuICAgICAgLnRoZW4ocmVzID0+IHtcbiAgICAgICAgcmV0dXJuICRxLnJlc29sdmUocmVzLmRhdGEpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnI9PntcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnI6IFwiLCBlcnIpO1xuICAgICAgfSk7XG4gIH07XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
